import os
import sys
aquiladir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0,aquiladir) 
from sniperec import snipeRec
from snipemap import snipeMap
from snipeid import snipeId
from _version import VERSION
from time import time
import argparse

#main()
parser = argparse.ArgumentParser(description="snipe")

#create the top-level parser
parser.add_argument('--version', action='version', version=VERSION)
subparsers = parser.add_subparsers(dest='subcommand', help='Select one of the following sub-commands')


# create the parser for the "MAP" command
parser_b = subparsers.add_parser('map', help='snipe MAP Module')
#parser_b.add_argument('-n', default=1,type=int, action='store', dest='lib_size', required=False, 
#help='Filter threshold setting (default: 1)')
parser_b.add_argument('-1', default='', action='store', dest='map_inputread1', required=False, 
	help='Input Read Fastq File (Pair 1)')
parser_b.add_argument('-2', default='', action='store', dest='map_inputread2', required=False, 
help='Input Read Fastq File (Pair 2)')
parser_b.add_argument('-targetRefFiles', default='', action='store', 
	dest='map_targetref', required=False, 
	help='Target Reference Genome Fasta Files Full Path (Comma Separated)')
parser_b.add_argument('-filterRefFiles', default='', action='store', 
	dest='map_filterref', required=False, 
	help='Filter Reference Genome Fasta Files Full Path (Comma Separated)')
parser_b.add_argument('-o',action='store',default='.',dest='map_outDir',required=False,
help='Output Directory (Default=.(current directory))')
parser_b.add_argument('-outAlign', action='store', default='outalign.sam', 
	dest='map_outalign', required=False, 
	help='Output Alignment File Name (Default=outalign.sam)')
parser_b.add_argument('-tag', default='', action='store', 
	dest='tag_name', required=False, 
	help='Experiment Tag added to files generated for identification')
parser_b.add_argument('-indexDir', action='store', default='.', 
	dest='map_indexdir', required=False, 
	help='Index Directory (Default=. (current directory))')
parser_b.add_argument('-t', action='store', dest='map_numthreads', required=False, 
default=1, type=int, help='Number of threads to use by snipe if different from default (1)')

# create the parser for the "ID" command
parser_c = subparsers.add_parser('id', help='snipe ID Module')
parser_c.add_argument('-o',action='store',default='.',dest='map_outDir',required=False,
help='Output Directory (Default=.(current directory))')
parser_c.add_argument('-outAlign', action='store', default='outalign.sam', 
	dest='map_outalign', required=False, 
	help='Output Alignment File Name (Default=outalign.sam)')
parser_c.add_argument('-tag', default='', action='store', 
	dest='tag_name', required=False, 
	help='Experiment Tag added to files generated for easy identification')

#create the parser for the "rec" command
parser_a = subparsers.add_parser('rec', help='snipe rec Module')
#parser_a.add_argument('-i', action='store', dest='lib_reference', required=True, 
#help='Specify reference genome (Folder contains reference sequence)')
parser_a.add_argument('-c', action='store', dest='core_reference', required=True, 
help='the directory of the species specific region')
parser_a.add_argument('-1', default='', action='store', dest='rec_inputread1', required=False, 
	help='Input Read Fastq File (Pair 1)')
parser_a.add_argument('-2', default='', action='store', dest='rec_inputread2', required=False, 
help='Input Read Fastq File (Pair 2)')
parser_a.add_argument('-idReport', action='store', dest='id_report_file', required=True,
	help='the directory of Report file generated by id module')
parser_a.add_argument('-dictTarget', action='store', dest='dict_target', required=True,
	help='the dict which contain the strain to species mapping')
parser_a.add_argument('-dictTemplate', action='store', dest='dict_template', required=True,
	help='the dict which contain the strain to name mapping')
parser_a.add_argument('-o',action='store',default='.',dest='rec_outDir',required=False,
help='Output Directory (Default=.(current directory))')
parser_a.add_argument('-t', action='store', dest='rec_numthreads', required=False, 
default=1, type=int, help='Number of threads to use  default (1)')

def main():
    # parse some argument lists
    inputArgs = parser.parse_args()

    ########## snipeMap model ############
    if inputArgs.subcommand=='map':
       snipeOptions = snipeMap.snipeOptions()
       if len(inputArgs.map_inputread1)>0:
            snipeOptions.read1 = inputArgs.map_inputread1
       if len(inputArgs.map_inputread2)>0:
            snipeOptions.read2 = inputArgs.map_inputread2
       if len(inputArgs.map_targetref)>0:
            snipeOptions.reference_path = inputArgs.map_targetref
       if len(inputArgs.map_filterref)>0:
            snipeOptions.filter_path = inputArgs.map_filterref
       if len(inputArgs.map_outDir)>0:
            snipeOptions.out_path = inputArgs.map_outDir
       if len(inputArgs.map_outalign)>0:
            snipeOptions.outAlignFile = inputArgs.map_outalign
       if len(inputArgs.tag_name)>0:
            snipeOptions.tag_n = inputArgs.tag_name
       if len(inputArgs.map_indexdir)>0:
            snipeOptions.index_path = inputArgs.map_indexdir
       snipeOptions.threads = inputArgs.map_numthreads
       snipeMap.map(snipeOptions)
    ########## snipeId model ############
    if inputArgs.subcommand=='id':
       snipeIdOptions = snipeId.snipeIdOptions()
       if len(inputArgs.map_outDir)>0:
            snipeIdOptions.outdir = inputArgs.map_outDir
       if len(inputArgs.map_outalign)>0:
            snipeIdOptions.ali_file = inputArgs.map_outalign
       if len(inputArgs.tag_name)>0:
            snipeIdOptions.tag_name = inputArgs.tag_name
       snipeId.id(snipeIdOptions)

    ########## snipeRec model ############
    if inputArgs.subcommand=='rec':
       snipeReOptions = snipeRec.snipeReOptions()
       if len(inputArgs.core_reference)>0:
            snipeReOptions.path_core = inputArgs.core_reference
       if len(inputArgs.rec_inputread1)>0:
            snipeReOptions.read1 = inputArgs.rec_inputread1
       if len(inputArgs.rec_inputread2)>0:
            snipeReOptions.read2 = inputArgs.rec_inputread2
       if len(inputArgs.id_report_file)>0:
            snipeReOptions.id_file = inputArgs.id_report_file
       if len(inputArgs.dict_target)>0:
            snipeReOptions.dict_ta = inputArgs.dict_target
       if len(inputArgs.dict_template)>0:
            snipeReOptions.dict_te = inputArgs.dict_template
       if len(inputArgs.rec_outDir)>0:
            snipeReOptions.out_path = inputArgs.rec_outDir
       snipeReOptions.threads = inputArgs.rec_numthreads
       snipeRec.rec(snipeReOptions)

if __name__ == "__main__":
    main()
